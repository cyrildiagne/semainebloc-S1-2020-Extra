/*	jQuery plugins
	Copyright (c) 2011 St√©phane Carion, ComputedBy (www.computedby.com)

	Dual licensed under the MIT or GPL Version 2 licenses.
	http://www.opensource.org/licenses/mit-license.php
	http://www.opensource.org/licenses/gpl-2.0.php
	
	Based on works:
		Tiny Scrollbar 1.65, Maarten Baijs, http://www.baijs.nl/tinyscrollbar/
		jquery.innerfade.js, Torsten Baldes, http://medienfreunde.com/lab/innerfade/
		mousewheel.js, Brandon Aaron (http://brandonaaron.net), http://brandonaaron.net/javascripts/plugins/mousewheel.js
*/

/* cbyScrollbarH plugin (horizontal scrollbar for iPad/android/desktop computers) */
(function($){
	/* OO jquery based on http://www.virgentech.com/blog/2009/10/building-object-oriented-jquery-plugin.html */
	$.fn.cbyScrollbarH = function(options) {
		return this.each(function() {
			var element = $(this);
			// Return early if this element already has a plugin instance
			if (element.data('cbyScrollbarH')) return;
			// pass options to plugin constructor
			var cbyScrollbarH = new cbyScrollbarHClass(this, options);
			// Store plugin object in this element's data
			element.data('cbyScrollbarH', cbyScrollbarH);
		});
	};
	
	var cbyScrollbarHClass = function(element,options) {
		// Start declaration (don't forget to put 'var' before every variables/functions!)
		// Default settings
		var settings = jQuery.extend({
			step: 40,
			thumbsize: 4.5,
			thumbcolor: "#000000",
			thumbopac: 0.3
		}, options);
		var container=$(element);				// The object
		var iScroll=0;							// The scrolling value (positive, 100 to move up 100px)
		var iScrollTo=0;						// The scrolling to value
		var iScrollLast=0;						// Last saved scrolling value
		var mouseIn=0;							// Remember if cursor is inside the container
		// The element MUST contain a div embedding the content!
		if (container.children().get(0).nodeName.toUpperCase()!="DIV") { alert("cbyScrollbarH error: firstChild is not a DIV");return false;}
		container.css({position:"relative",overflow:"hidden"});
		var viewport=container.find("div").eq(0);
		viewport.css({position:"absolute",width:"100%"});
		var height=container.height();
		var maxScroll=viewport.height();
		//container.find('img').eq(0).bind('load',function(){alert($(this).attr("src"));doResize()});
		var timeout=false;
		if (container.find(".thumb").length) {
			var thumb=container.find(".thumb").eq(0);
		} else {
			var thumb=$("<div>")
				.css({position:"absolute",right:settings.thumbsize,width:0,height:height*height/maxScroll-2*settings.thumbsize,top:0,cursor:"pointer",display:"none",opacity:settings.thumbopac})
				.css("border",settings.thumbsize+"px solid "+settings.thumbcolor).css("border-radius",settings.thumbsize+"px").addClass("thumb");
			container.append(thumb);
		}
		container.bind("mouseenter",function(){mouseIn=1;if (maxScroll>height) {thumb.show().stop().animate({opacity:settings.thumbopac});}});		// Mouseover fires to many event!
		container.bind("mouseleave",function(){mouseIn=0;thumb.stop().animate({opacity:0})});
		thumb.bind("mousedown", function(event){if (maxScroll>height) mouse(event),false});
		container.bind("mousewheel",function(event,delta){if (maxScroll>height) wheel(event,delta)});
		container.bind("touchstart",function(event){if (maxScroll>height) touch(event),false});
		// Set a tabindex to allow keyboard focus, but remove ouline if object focused
		container.attr("tabindex","0").css("outline","none").bind("keydown",function(event){if (maxScroll>height) keyboard(event),true});
		
		var move = {mode: 0, y0:0, y1:0, y2:0, y3:0, d:0, anim: 0}

		var mouse = function(event) {
			event.preventDefault();
			event.stopPropagation();
			switch (event.type) {
				case "mousedown":	// init, set 
					move.mode=1;
					move.y0 = event.pageY-iScroll/maxScroll*height;
					$(document).bind("mousemove mouseup", function(event){mouse(event),false});
					container.unbind("mouseleave");
					break;
				case "mouseup":
					move.mode=0;
					$(document).unbind("mousemove mouseup");
					container.bind("mouseleave",function(){thumb.fadeOut()});
					break;
				case "mousemove":
					if (move.mode) {
						iScroll=(event.pageY-move.y0)*maxScroll/height;
						doScroll();
					}
					break;
			}
		}
		
		var touch = function(event) {
			if (event.type=="touchstart" && /^A|INPUT|TEXTAREA|SELECT$/.test(event.target.nodeName.toUpperCase()) ) return true;		// check if node is not 'clickable'
			var e = event.originalEvent;
			switch (event.type) {
				case "touchstart":	// init, set 
					thumb.show();
					if (move.anim) {
						viewport.stop();
						thumb.stop();
						thumb.show();
						move.anim=0;
						move.d=0;
						iScroll=-parseInt(viewport.css("top"));
					}
					move.mode=2;
					move.y0 = iScroll+e.targetTouches[0].pageY;
					move.y1 = e.targetTouches[0].pageY;
					move.y2 = e.targetTouches[0].pageY;
					move.y3 = e.targetTouches[0].pageY;
					$(document).bind("touchmove touchend", function(event){touch(event),false});
					if (timeout) clearTimeout(timeout);
					break;
				case "touchend":
					timeout=setTimeout(function(){thumb.fadeOut()},2000);
					move.mode=0;
					$(document).unbind("touchend touchmove");
					var target=event.target;
					if (Math.abs(move.y3-move.y2)<5) {
						$(event.target).click();return true;
					}
					if (move.d>100) move.d=100;
					if (move.d<-100) move.d=-100;
					doAnimate(move.d);
					break;
				case "touchmove":
					if (move.mode) {
						move.d=move.y2-e.targetTouches[0].pageY;
						iScroll=(move.y0-e.targetTouches[0].pageY);
						move.y2 = e.targetTouches[0].pageY;
						doScroll();
					}
					break;
			}
			event.preventDefault();
			event.stopPropagation();
		}
		
		var wheel = function(event,delta) {
			iScroll=iScroll-settings.step*delta;
			doScroll();
			event.preventDefault();
		}

		var keyboard = function(event) {
			switch (event.which) {
				case 38:		// key up
					iScroll=iScroll-settings.step;
					break;
				case 40:		// key down
					iScroll=iScroll+settings.step;
					break;
				case 33:		// page up
					iScroll=iScroll-height;
					break;
				case 34:		// page down
					iScroll=iScroll+height;
					break;
			}
			doScroll();
			//event.preventDefault();   key event must go further 
		}

		
		var doScroll = function() {		// move the viewport and thumb to the right position (and check if not out of boundaries)
			if (move.mode!=2) {		// moving with mouse/wheel, can't go outside boundaries
				if (iScroll<0) {iScroll=0;}
				if (iScroll>(maxScroll-height)) {iScroll=maxScroll-height;}
			} else { // moving with touch panel, decrease iScrool if ouside boundaries
				if (iScroll<0) {iScroll=iScroll/2;}
				if (iScroll>(maxScroll-height)) {iScroll=maxScroll-height-(maxScroll-height-iScroll)/2;}
			}
			viewport.css("top",-iScroll);
			thumb.css({top:height*(iScroll/maxScroll)});
			iScrollLast=iScroll;
			//$('#debug').html("current="+iScroll);
		}
		
		var doAnimate = function(d) {
			move.anim=0;		// 0: no anim, >0: speed of animation
			move.d=d;
			if (iScroll<0) {
				move.anim=200;
				iScrollTo=0;
			} else {
				if (iScroll>(maxScroll-height)) {
					move.anim=200;
					iScrollTo=maxScroll-height;
				} else 
				if (Math.abs(d)>10) {
					move.anim=800;
					iScrollTo=iScroll+12*(d);
					if (iScrollTo<0) {iScrollTo=-30;move.anim=200}
					if (iScrollTo>(maxScroll-height)) {iScrollTo=maxScroll-height+30;move.anim=200}
				}
			}
			//$('#debug').html("d= "+d+" to="+iScrollTo+" current="+iScroll);
			
			if (move.anim) {
				viewport.animate({top: -iScrollTo}, move.anim, 'quadEaseOut', function(){iScroll=iScrollTo;move.anim=0;doAnimate(0)});
				thumb.animate({top: height*(iScrollTo/maxScroll)}, move.anim, 'quadEaseOut');
			}
		}
		
		var doResize = function() {
			height=container.height();
			maxScroll=viewport.height();
			//maxScroll can be = 0!
			if (maxScroll) thumb.css({height:height*height/maxScroll-2*settings.thumbsize});
			if (maxScroll>height) {
				doScroll(); 
				if (mouseIn) thumb.fadeIn();
			} else {
				viewport.css("top",0);
				thumb.hide();
			}
		}
		
		this.resize = function(){
			doResize();
		}
		this.getScroll = function(){
			return iScroll;
		}
		this.scrollTo = function(scrollTo){
			iScroll=scrollTo;
			doScroll();
		}
		this.scrollToAnim = function(iScrollTo){
			viewport.animate({top: -iScrollTo}, 200, 'quadEaseOut', function(){iScroll=iScrollTo;});
			thumb.animate({top: height*(iScrollTo/maxScroll)}, 200, 'quadEaseOut');
		}

	}
})(jQuery);

/* easing for cbyScrollbar */
jQuery.extend( jQuery.easing, {
	quadEaseOut: function(p, n, firstNum, diff) {
            var c=firstNum+diff;
            return -c *(p/=1)*(p-2) + firstNum;
	}
});

/* console log, ex: $.log("test") */
jQuery.log = function(message) {
  if(window.console) {
     console.log(message);
  } else {
     alert(message);
  }
};

/*! Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.6
 * 
 * Requires: 1.2.2+
 */

(function($) {

var types = ['DOMMouseScroll', 'mousewheel'];

if ($.event.fixHooks) {
    for ( var i=types.length; i; ) {
        $.event.fixHooks[ types[--i] ] = $.event.mouseHooks;
    }
}

$.event.special.mousewheel = {
    setup: function() {
        if ( this.addEventListener ) {
            for ( var i=types.length; i; ) {
                this.addEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = handler;
        }
    },
    
    teardown: function() {
        if ( this.removeEventListener ) {
            for ( var i=types.length; i; ) {
                this.removeEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = null;
        }
    }
};

$.fn.extend({
    mousewheel: function(fn) {
        return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
    },
    
    unmousewheel: function(fn) {
        return this.unbind("mousewheel", fn);
    }
});


function handler(event) {
    var orgEvent = event || window.event, args = [].slice.call( arguments, 1 ), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;
    event = $.event.fix(orgEvent);
    event.type = "mousewheel";
    
    // Old school scrollwheel delta
    if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta/120; }
    if ( orgEvent.detail     ) { delta = -orgEvent.detail/3; }
    
    // New school multidimensional scroll (touchpads) deltas
    deltaY = delta;
    
    // Gecko
    if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
        deltaY = 0;
        deltaX = -1*delta;
    }
    
    // Webkit
    if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY/120; }
    if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = -1*orgEvent.wheelDeltaX/120; }
    
    // Add event and delta to the front of the arguments
    args.unshift(event, delta, deltaX, deltaY);
    
    return ($.event.dispatch || $.event.handle).apply(this, args);
}

})(jQuery);

String.prototype.latinise = function() {
	return latiniseIt(this);
};
latiniseIt = function(s) {
	var r=s.toLowerCase();
	r = r.replace(new RegExp("\\s", 'g'),"");
	r = r.replace(new RegExp("[√†√°√¢√£√§√•]", 'g'),"a");
	r = r.replace(new RegExp("√¶", 'g'),"ae");
	r = r.replace(new RegExp("√ß", 'g'),"c");
	r = r.replace(new RegExp("[√®√©√™√´]", 'g'),"e");
	r = r.replace(new RegExp("[√¨√≠√Æ√Ø]", 'g'),"i");
	r = r.replace(new RegExp("√±", 'g'),"n");                            
	r = r.replace(new RegExp("[√≤√≥√¥√µ√∂]", 'g'),"o");
	r = r.replace(new RegExp("≈ì", 'g'),"oe");
	r = r.replace(new RegExp("[√π√∫√ª√º]", 'g'),"u");
	r = r.replace(new RegExp("[√Ω√ø]", 'g'),"y");
	r = r.replace(new RegExp("\\W", 'g'),"");
	return r;
};

/**
 * jQuery.hasAttr
 * Copyright (c) 2011 Brian Martin - brianm at eystudios dot com | http://www.eystudios.com/brianprofile.html
 * Dual licensed under MIT and GPL.
 * Date: 8/10/2011
*/
(function($){
	$.fn.extend({ 
		hasAttr: function(attribute) {
			if (typeof $(this).attr(attribute) === 'undefined') {
				return false;
			} else {
				return true;
			}
		}
	});
})(jQuery);